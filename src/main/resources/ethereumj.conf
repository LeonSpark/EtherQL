

peer.discovery = {

    # if peer discovery is off
    # the peer window will show
    # only what retrieved by active
    # peer [true/false]
    enabled = true

    # number of workers that
    # tastes the peers for being
    # online [1..10]
    workers = 8

    # List of the peers to start
    # the search of the online peers
    # values: [ip:port, ip:port, ip:port ...]
    ip.list = [
        "54.94.239.50:30303",
        "52.16.188.185:30303",
    ]

    # indicates if the discovered nodes and their reputations
    # are stored in DB and persisted between VM restarts
    persist = true

    # the period in seconds with which the discovery
    # tries to reconnect to successful nodes
    # 0 means the nodes are not reconnected
    touchPeriod = 600

    # the maximum nuber of nodes to reconnect to
    # -1 for unlimited
    touchMaxNodes = 100
}

peer {

    # Boot node list
    active = [
    ]

    # The protocols supported by peer
    # can be: [eth, shh, bzz]
    capabilities = [eth]

    # Local network adapter IP to which
    # the discovery UDP socket is bound
    # e.g: 192.168.1.104
    #
    # if the value is empty will be retrived
    # by punching to some know address e.g: www.google.com
    bind.ip = 202.195.129.247

    # Peer for server to listen for incoming
    # connections
    listen.port = 30303

    # connection timeout for trying to
    # connect to a peer [seconds]
    connection.timeout = 2

    # the parameter specifies how much
    # time we will wait for a message
    # to come before closing the channel
    channel.read.timeout = 30

    # Private key of the peer
    # The key is generated by default on the first run and stored in the database folder
    # If you have your own peer ID specify its private key here
    # derived nodeId = dead745c1dbcde518b48e52aca1e8d5ba666005a2c8804e39826c6080fb11c1e8abe41d1e41896e871f204f790a90fa9781744cccecf492212192a7c56e7673b
    # privateKey = f67c4032a7ff79bbfa7a780331b235c4eb681d51a0704cb1562064fb6c4bced4

    # Network id
    networkId = 1
}

# the folder resources/genesis
# contains several versions of
# genesis configuration according
# to the network the peer will run on
genesis = frontier.json

# the time we wait to the network
# to approve the transaction, the
# transaction got approved when
# include into a transactions msg
# retrieved from the peer [seconds]
transaction.approve.timeout = 15

# default directory where we keep
# basic Serpent samples relative
# to home.dir
samples.dir = samples

database {
    # place to save physical storage files
    dir = database
    # every time the application starts
    # the existing database will be
    # destroyed and all the data will be
    # downloaded from peers again [true/false]
    reset = false
}

# this string is computed
# to be eventually the address
# that get the miner reward
coinbase.secret = monkey

dump {
    # for testing purposes
    # all the state will be dumped
    # in JSON form to [dump.dir]
    # if [dump.full] = true
    # possible values [true/false]
    full = false
    dir = dump

    # This defines the vmtrace dump
    # to the console and the style
    # -1 for no block trace
    # styles: [pretty/standard+] (default: standard+)
    block = -1
    style = pretty

    # clean the dump dir each start
    clean.on.restart = true
}

# structured trace
# is the trace being
# collected in the
# form of objects and
# exposed to the user
# in json or any other
# convenient form.
vm.structured {
    trace = false
    dir = vmtrace
    compressed = true
    initStorageLimit = 10000
}

# make changes to tracing options
# starting from certain block
# -1 don't make any tracing changes
trace.startblock = -1

# invoke vm program on
# message received,
# if the vm is not invoked
# the balance transfer
# occurs anyway  [true/false]
play.vm = true

# hello phrase will be included in
# the hello message of the peer
hello.phrase = Dev

# this property used
# mostly for a debug purpose
# so if you don't know exactly how
# to apply it leave to be [-1]
#
# ADVANCED: if we want to load a root hash
# for db not from the saved block chain (last block)
# but any manual hash this property will help.
# values [-1] - load from db
#        [hex hash 32 bytes] root hash
root.hash.start = null

# Key value data source values: [leveldb/redis/mapdb]
keyvalue.datasource = leveldb

# Redis cloud enabled flag.
# Allows using RedisConnection for creating cloud based data structures.
redis.enabled=false

record.blocks=false
blockchain.only=false

# Load the blocks
# from a rlp lines
# file and not for
# the net
blocks.loader=""


# the parameter speciphy when exactly
# to switch managing storage of the
# account on autonomous db
details.inmemory.storage.limit=1000

# cache for blockchain run
# the flush hapens depending
# on memory usage or blocks
# treshhold if both specipied
# memory will take precedence
cache {

    flush {

        # [0.7 = 70% memory to flush]
        memory = 0.7

        # [10000 flush each 10000 blocks]
        blocks = 10000
    }
}

# eth sync process
sync {

    # block chain synchronization
    # can be: [true/false]
    enabled = true

    # maximum blocks hashes to ask.
    # sending GET_BLOCK_HASHES msg
    # we specify number of block we want
    # to get, recomendec value [1..1000]
    # Default: unlimited
    max.hashes.ask = 10000

    # maximum blocks to ask,
    # when downloading the chain
    # sequenteally sending GET_BLOCKS msg
    # we specify number of blocks we want
    # to get, recomendec value [1..120]
    max.blocks.ask = 100

    # minimal peers count
    # used in sync process
    # sync may use more peers
    # than this value
    # but always trying to get
    # at least this number from discovery
    peer.count = 10
}
